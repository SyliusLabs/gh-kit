// Code generated by MockGen. DO NOT EDIT.
// Source: cli.go

// Package githubcli is a generated GoMock package.
package githubcli

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGhCliExecutor is a mock of GhCliExecutor interface.
type MockGhCliExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockGhCliExecutorMockRecorder
}

// MockGhCliExecutorMockRecorder is the mock recorder for MockGhCliExecutor.
type MockGhCliExecutorMockRecorder struct {
	mock *MockGhCliExecutor
}

// NewMockGhCliExecutor creates a new mock instance.
func NewMockGhCliExecutor(ctrl *gomock.Controller) *MockGhCliExecutor {
	mock := &MockGhCliExecutor{ctrl: ctrl}
	mock.recorder = &MockGhCliExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGhCliExecutor) EXPECT() *MockGhCliExecutorMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockGhCliExecutor) Exec(args ...string) (bytes.Buffer, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(bytes.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exec indicates an expected call of Exec.
func (mr *MockGhCliExecutorMockRecorder) Exec(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockGhCliExecutor)(nil).Exec), args...)
}
